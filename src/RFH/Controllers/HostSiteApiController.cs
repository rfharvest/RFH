using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using RFH.Infrastructure;
using RFH.Models;
using System.Text.RegularExpressions;

namespace RFH.Controllers
{
    public class HostSiteApiController : ApiController
    {
        private readonly DataContext _dataContext = new DataContext();

        public IEnumerable<HostSite> Get()
        {
            var rv = _dataContext.HostSites.Where(h => h.Latitude.HasValue && h.Longitude.HasValue).ToList();
            return rv;
        }
    }

    public class CountyBoundarApiController : ApiController
    {
        private string _adams = @"-118.98204,46.95508 -118.98199,46.96712 -118.98196,46.99964 -118.98172,47.02875 -118.98153,47.04505 -118.98129,47.06786 -118.98109,47.08416 -118.98114,47.09435 -118.98123,47.11576 -118.98052,47.17417 -118.97991,47.23491 -118.97952,47.26171 -118.97828,47.26172 -118.93712,47.26161 -118.89814,47.26141 -118.85775,47.26111 -118.83281,47.26095 -118.80102,47.26096 -118.78076,47.26099 -118.75027,47.26103 -118.72285,47.26105 -118.69287,47.26106 -118.66774,47.26104 -118.62958,47.26097 -118.59279,47.26106 -118.55014,47.26108 -118.50927,47.26098 -118.46889,47.26084 -118.44336,47.26083 -118.39291,47.26072 -118.33941,47.26089 -118.28365,47.26112 -118.25195,47.26122 -118.16437,47.26117 -118.0893,47.26088 -118.06529,47.26051 -117.99466,47.26055 -117.96073,47.26045 -117.96014,47.26045 -117.96015,47.25999 -117.95993,47.13264 -117.95965,47.06274 -117.96013,47.00339 -117.95922,46.9488 -117.97076,46.86813 -117.98823,46.86054 -118.00089,46.8494 -118.00327,46.83875 -117.99188,46.83667 -117.99495,46.83039 -117.99831,46.82391 -118.00693,46.81814 -118.01902,46.81041 -118.0179,46.79952 -118.01567,46.78471 -118.03947,46.77989 -118.05176,46.76922 -118.08951,46.77714 -118.11122,46.77047 -118.11744,46.76456 -118.15324,46.75914 -118.15671,46.75183 -118.17934,46.74691 -118.19614,46.74858 -118.20888,46.73922 -118.20981,46.73894 -118.20989,46.73894 -118.3159,46.73805 -118.34858,46.7371 -118.40979,46.73672 -118.4271,46.73677 -118.47027,46.73681 -118.51729,46.73676 -118.5633,46.73656 -118.61153,46.73642 -118.6809,46.73594 -118.73403,46.73572 -118.7915,46.73546 -118.81907,46.73555 -118.83605,46.7356 -118.87647,46.73586 -118.93198,46.73631 -118.96456,46.7366 -119.00535,46.73683 -119.03827,46.73738 -119.11195,46.73808 -119.12823,46.73783 -119.18245,46.73812 -119.19987,46.73842 -119.23984,46.73841 -119.28158,46.73799 -119.34573,46.73782 -119.36939,46.7377 -119.36933,46.76314 -119.36933,46.81138 -119.36896,46.87207 -119.36864,46.8973 -119.35695,46.91258 -119.2995,46.91249 -119.22985,46.91235 -119.18516,46.91228 -119.16263,46.91216 -119.14696,46.91222 -119.12465,46.91213 -119.10379,46.91196 -119.0681,46.91173 -118.98735,46.91135 -118.98207,46.95216";
        private string _skagit = @"<Polygon><outerBoundaryIs><LinearRing><coordinates>-122.2308,48.64562 -122.12626,48.64614 -122.07936,48.6459 -121.9848,48.64516 -121.91158,48.64478 -121.8216,48.64377 -121.71644,48.64311 -121.68761,48.64301 -121.57962,48.64262 -121.5141,48.64239 -121.40237,48.64181 -121.36112,48.64159 -121.30724,48.6413 -121.22552,48.64094 -121.0692,48.64088 -121.01821,48.64086 -120.96203,48.64102 -120.86187,48.6577 -120.75528,48.65753 -120.75202,48.65754 -120.75187,48.65713 -120.7508,48.6549 -120.75172,48.65219 -120.7533,48.64766 -120.76027,48.6442 -120.76914,48.644 -120.77287,48.64083 -120.77615,48.63678 -120.78145,48.62984 -120.78709,48.6263 -120.78729,48.62196 -120.78323,48.61213 -120.77653,48.59719 -120.76565,48.58946 -120.75519,48.58129 -120.74549,48.57875 -120.7273,48.58558 -120.72314,48.59393 -120.717,48.59505 -120.70964,48.59147 -120.69963,48.58386 -120.6886,48.57549 -120.69018,48.56202 -120.70024,48.55975 -120.70473,48.54614 -120.70161,48.53247 -120.70156,48.53162 -120.70164,48.53159 -120.76973,48.50797 -120.81568,48.53669 -120.86122,48.54229 -120.90408,48.53329 -120.94581,48.5302 -120.95709,48.50102 -121.00732,48.49435 -121.04102,48.49045 -121.06022,48.46595 -121.05552,48.45085 -121.04222,48.44705 -121.04182,48.43075 -121.05282,48.41215 -121.05942,48.38715 -121.05432,48.37455 -121.04482,48.36525 -121.04212,48.35306 -121.05612,48.34595 -121.06952,48.33864 -121.06657,48.32482 -121.06672,48.31504 -121.04565,48.30887 -121.03888,48.30252 -121.01402,48.30085 -121.0015,48.29568 -121.00141,48.29555 -121.00176,48.29555 -121.06195,48.2958 -121.25444,48.29598 -121.41082,48.29593 -121.44339,48.29593 -121.53379,48.29642 -121.5756,48.2974 -121.63299,48.29853 -121.66135,48.29863 -121.69158,48.29837 -121.75455,48.29825 -121.83592,48.29801 -121.86626,48.29792 -121.94162,48.29768 -122.00557,48.29755 -122.09745,48.29788 -122.14028,48.29777 -122.18132,48.29726 -122.20496,48.29733 -122.24838,48.29747 -122.29197,48.29764 -122.31794,48.29755 -122.33338,48.29753 -122.36143,48.29763 -122.36942,48.29765 -122.44715,48.29759 -122.45833,48.29759 -122.46205,48.29861 -122.50013,48.31386 -122.51869,48.32761 -122.53961,48.341 -122.55104,48.35139 -122.55912,48.36434 -122.56087,48.36798 -122.57061,48.37502 -122.57437,48.38069 -122.57705,48.39103 -122.57916,48.39507 -122.57744,48.40143 -122.57955,48.40779 -122.58514,48.41263 -122.59194,48.41776 -122.60296,48.41461 -122.61092,48.41307 -122.62628,48.40941 -122.63396,48.40857 -122.63917,48.4063 -122.64354,48.40614 -122.65097,48.40582 -122.66075,48.40593 -122.66494,48.41191 -122.67535,48.41241 -122.73888,48.40561 -122.73974,48.40551 -122.73947,48.40732 -122.74012,48.42198 -122.74853,48.44076 -122.75249,48.44799 -122.76023,48.46386 -122.76006,48.47834 -122.7531,48.48549 -122.74964,48.48842 -122.74142,48.49418 -122.73552,48.50238 -122.73588,48.51072 -122.74607,48.52601 -122.75124,48.52938 -122.7548,48.5325 -122.75506,48.53287 -122.75576,48.53869 -122.75125,48.54647 -122.74675,48.55796 -122.74945,48.56176 -122.75962,48.57451 -122.76845,48.5937 -122.76389,48.61209 -122.74672,48.6248 -122.73699,48.62982 -122.72321,48.63986 -122.71101,48.64397 -122.69688,48.65194 -122.69302,48.64983 -122.56595,48.63366 -122.48609,48.64531 -122.40839,48.64512 -122.35433,48.64513 -122.329,48.64535 -122.29952,48.6453</coordinates></LinearRing></outerBoundaryIs></Polygon>";

        public IEnumerable<Coordinate> Get()
        {
            var rv = new List<Coordinate>();

            var regex = new Regex(@"(\-?\d+(\.\d+)?),\s*(\-?\d+(\.\d+)?)");

            var matches = regex.Matches(_skagit);

            foreach (var match in matches)
            {
                var s = match.ToString();
                var index = s.IndexOf(',');
                var lat = double.Parse(s.Substring(index + 1));
                var lng = double.Parse(s.Substring(0, index));

                var coord = new Coordinate {Lat = lat, Lng = lng};
                rv.Add(coord);
            }

            return rv;
        }
    }

    public class Coordinate
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }
}
